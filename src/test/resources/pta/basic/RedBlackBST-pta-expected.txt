Points-to sets of all variables
[]:<Node: void <init>(int,java.lang.Object,boolean,int)>/%this -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<Node: void <init>(int,java.lang.Object,boolean,int)>/val -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: Node balance(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node balance(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$11 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$13 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$15 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$18 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node balance(Node)>/temp$8 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node delete(Node,int)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$12 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$15 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$16 -> []
[]:<RedBlackBST: Node delete(Node,int)>/temp$17 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$19 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$20 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$22 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$25 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$26 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$28 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$29 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$30 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$31 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$32 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$33 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$8 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node delete(Node,int)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node deleteMin(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$1 -> []
[]:<RedBlackBST: Node deleteMin(Node)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$8 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node deleteMin(Node)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node min(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node min(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node min(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node min(Node)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node min(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedLeft(Node)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedRight(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node moveRedRight(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedRight(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedRight(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node moveRedRight(Node)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$11 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$12 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$14 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$15 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$17 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$18 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$20 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$22 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$25 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node put(Node,int,java.lang.Object)>/val -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: Node rotateLeft(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node rotateLeft(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateLeft(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: Node rotateRight(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: Node rotateRight(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean check()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean contains(int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean contains(int)>/temp$0 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: boolean is23()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean is23()>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean is23(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/temp$11 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean is23(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBST()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isBST()>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBST(Node,int,int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isBST(Node,int,int)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBST(Node,int,int)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBST(Node,int,int)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isBalanced()>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced()>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced()>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced(Node,int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isBalanced(Node,int)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced(Node,int)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isBalanced(Node,int)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isEmpty()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isEmpty()>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isRed(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isRed(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isSizeConsistent()>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/temp$12 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: boolean isSizeConsistent(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: int size(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: int size(Node)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: java.lang.Object get(Node,int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: java.lang.Object get(Node,int)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: java.lang.Object get(Node,int)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: java.lang.Object get(Node,int)>/temp$4 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: java.lang.Object get(Node,int)>/temp$5 -> []
[]:<RedBlackBST: java.lang.Object get(Node,int)>/x -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: java.lang.Object get(int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: java.lang.Object get(int)>/temp$0 -> []
[]:<RedBlackBST: java.lang.Object get(int)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: java.lang.Object get(int)>/temp$2 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: void <init>()>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void delete(int)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void delete(int)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$10 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$12 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$4 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$5 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void delete(int)>/temp$9 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void flipColors(Node)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void flipColors(Node)>/h -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void flipColors(Node)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void flipColors(Node)>/temp$3 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void flipColors(Node)>/temp$6 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void flipColors(Node)>/temp$7 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void main(java.lang.String[])>/args -> [[]:EntryPointObj{alloc=MethodParam{<RedBlackBST: void main(java.lang.String[])>/0},type=java.lang.String[] in <RedBlackBST: void main(java.lang.String[])>}]
[]:<RedBlackBST: void main(java.lang.String[])>/o1 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}]
[]:<RedBlackBST: void main(java.lang.String[])>/o114 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: void main(java.lang.String[])>/st -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void main(java.lang.String[])>/temp$0 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void main(java.lang.String[])>/temp$1 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}]
[]:<RedBlackBST: void main(java.lang.String[])>/temp$2 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: void main(java.lang.String[])>/temp$3 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: void main(java.lang.String[])>/temp$4 -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[16@L419] newarray java.lang.Object[%intconst0]}]
[]:<RedBlackBST: void main(java.lang.String[])>/val -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:<RedBlackBST: void put(int,java.lang.Object)>/%this -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
[]:<RedBlackBST: void put(int,java.lang.Object)>/temp$0 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void put(int,java.lang.Object)>/temp$1 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void put(int,java.lang.Object)>/temp$2 -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:<RedBlackBST: void put(int,java.lang.Object)>/val -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]

Points-to sets of all static fields

Points-to sets of all instance fields
[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.<Node: Node left> -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.<Node: Node right> -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.<Node: java.lang.Object val> -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, []:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]
[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}.<RedBlackBST: Node root> -> [[]:NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]

Points-to sets of all array indexes
[]:EntryPointObj{alloc=MethodParam{<RedBlackBST: void main(java.lang.String[])>/0},type=java.lang.String[] in <RedBlackBST: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=MethodParam{<RedBlackBST: void main(java.lang.String[])>/0}[*],type=java.lang.String in <RedBlackBST: void main(java.lang.String[])>}]
[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[16@L419] newarray java.lang.Object[%intconst0]}[*] -> [[]:NewObj{<RedBlackBST: void main(java.lang.String[])>[8@L415] new java.lang.Object}]

