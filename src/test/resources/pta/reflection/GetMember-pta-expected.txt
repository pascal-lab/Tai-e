Points-to sets of all variables
[]:<GetMember: void main(java.lang.String[])>/r0 -> [[]:EntryPointObj{alloc=MethodParam{<GetMember: void main(java.lang.String[])>/0},type=java.lang.String[] in <GetMember: void main(java.lang.String[])>}]
[]:<GetMember: void testConstructor()>/$r1 -> [[]:NewObj{<GetMember: void testConstructor()>[4@L14] newarray java.lang.Class[%intconst0]}]
[]:<GetMember: void testConstructor()>/$r2 -> [[]:ReflectionMetaObj{alloc=<U: void <init>(V)>,type=java.lang.reflect.Constructor}]
[]:<GetMember: void testConstructor()>/$r3 -> [[]:NewObj{<GetMember: void testConstructor()>[9@L15] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testConstructor()>/$r4 -> [[]:ZeroLengthArray{alloc=<Merged zero-length java.lang.Class[]>,type=java.lang.Class[]}]
[]:<GetMember: void testConstructor()>/$r5 -> [[]:ReflectionMetaObj{alloc=<U: void <init>()>,type=java.lang.reflect.Constructor}, []:ReflectionMetaObj{alloc=<U: void <init>(V)>,type=java.lang.reflect.Constructor}, []:ReflectionMetaObj{alloc=<U: void <init>(java.lang.Object)>,type=java.lang.reflect.Constructor}]
[]:<GetMember: void testConstructor()>/$r6 -> [[]:NewObj{<GetMember: void testConstructor()>[14@L17] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testConstructor()>/%classconst2 -> [[]:ConstantObj{java.lang.Class: V.class}]
[]:<GetMember: void testConstructor()>/r0 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testConstructor()>/r7 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testConstructor()>/r8 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testGetClass()>/$r0 -> [[]:NewObj{<GetMember: void testGetClass()>[0@L29] new U}]
[]:<GetMember: void testGetClass()>/$r1 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testGetClass()>/$r2 -> [[]:NewObj{<GetMember: void testGetClass()>[4@L31] newarray java.lang.Class[%intconst0]}]
[]:<GetMember: void testGetClass()>/$r3 -> []
[]:<GetMember: void testGetClass()>/$r4 -> [[]:ReflectionMetaObj{alloc=<U: void foo()>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(int)>,type=java.lang.reflect.Method}]
[]:<GetMember: void testGetClass()>/$r5 -> [[]:NewObj{<GetMember: void testGetClass()>[10@L32] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testGetClass()>/$r6 -> [[]:NewObj{<GetMember: void testGetClass()>[14@L33] newarray java.lang.Class[%intconst0]}]
[]:<GetMember: void testGetClass()>/$r7 -> [[]:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<V: void foo(V)>,type=java.lang.reflect.Method}]
[]:<GetMember: void testGetClass()>/$r8 -> [[]:NewObj{<GetMember: void testGetClass()>[18@L34] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testGetClass()>/%classconst4 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testGetClass()>/%stringconst2 -> [[]:ConstantObj{java.lang.String: "foo"}]
[]:<GetMember: void testMethod()>/$r1 -> [[]:NewObj{<GetMember: void testMethod()>[4@L22] newarray java.lang.Class[%intconst0]}]
[]:<GetMember: void testMethod()>/$r2 -> []
[]:<GetMember: void testMethod()>/$r3 -> [[]:ReflectionMetaObj{alloc=<U: void foo()>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(int)>,type=java.lang.reflect.Method}]
[]:<GetMember: void testMethod()>/$r4 -> [[]:NewObj{<GetMember: void testMethod()>[10@L23] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testMethod()>/$r5 -> [[]:NewObj{<GetMember: void testMethod()>[14@L24] newarray java.lang.Class[%intconst0]}]
[]:<GetMember: void testMethod()>/$r6 -> [[]:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<V: void foo(V)>,type=java.lang.reflect.Method}]
[]:<GetMember: void testMethod()>/$r7 -> [[]:NewObj{<GetMember: void testMethod()>[18@L25] newarray java.lang.Object[%intconst0]}]
[]:<GetMember: void testMethod()>/%classconst4 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testMethod()>/%stringconst2 -> [[]:ConstantObj{java.lang.String: "foo"}]
[]:<GetMember: void testMethod()>/r0 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testMethod()>/r8 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<GetMember: void testMethod()>/r9 -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:<U: void <clinit>()>/temp$0 -> [[]:NewObj{<U: void <clinit>()>[0@L1] new java.lang.Object}]
[]:<U: void <init>()>/%this -> [[]:NewObj{<GetMember: void testGetClass()>[0@L29] new U}]
[]:<U: void <init>()>/temp$0 -> [[]:NewObj{<U: void <init>()>[1@L10] new W}]
[]:<V: void <init>()>/%this -> [[]:NewObj{<GetMember: void testGetClass()>[0@L29] new U}]
[]:<W: void <clinit>()>/temp$0 -> [[]:NewObj{<W: void <clinit>()>[0@L1] new java.lang.Object}]
[]:<W: void <init>()>/%this -> [[]:NewObj{<U: void <init>()>[1@L10] new W}]

Points-to sets of all static fields
<U: java.lang.Object stat> -> [[]:NewObj{<U: void <clinit>()>[0@L1] new java.lang.Object}]
<W: java.lang.Object f> -> [[]:NewObj{<W: void <clinit>()>[0@L1] new java.lang.Object}]
<java.lang.Integer: java.lang.Class TYPE> -> []

Points-to sets of all instance fields
[]:NewObj{<GetMember: void testGetClass()>[0@L29] new U}.<U: java.lang.Object inst> -> [[]:NewObj{<U: void <init>()>[1@L10] new W}]

Points-to sets of all array indexes
[]:EntryPointObj{alloc=MethodParam{<GetMember: void main(java.lang.String[])>/0},type=java.lang.String[] in <GetMember: void main(java.lang.String[])>}[*] -> [[]:EntryPointObj{alloc=MethodParam{<GetMember: void main(java.lang.String[])>/0}[*],type=java.lang.String in <GetMember: void main(java.lang.String[])>}]
[]:NewObj{<GetMember: void testConstructor()>[14@L17] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void <init>()>,type=java.lang.reflect.Constructor}, []:ReflectionMetaObj{alloc=<U: void <init>(V)>,type=java.lang.reflect.Constructor}, []:ReflectionMetaObj{alloc=<U: void <init>(java.lang.Object)>,type=java.lang.reflect.Constructor}]
[]:NewObj{<GetMember: void testConstructor()>[4@L14] newarray java.lang.Class[%intconst0]}[*] -> [[]:ConstantObj{java.lang.Class: V.class}]
[]:NewObj{<GetMember: void testConstructor()>[9@L15] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void <init>(V)>,type=java.lang.reflect.Constructor}]
[]:NewObj{<GetMember: void testGetClass()>[10@L32] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void foo()>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(int)>,type=java.lang.reflect.Method}]
[]:NewObj{<GetMember: void testGetClass()>[14@L33] newarray java.lang.Class[%intconst0]}[*] -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:NewObj{<GetMember: void testGetClass()>[18@L34] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<V: void foo(V)>,type=java.lang.reflect.Method}]
[]:NewObj{<GetMember: void testGetClass()>[4@L31] newarray java.lang.Class[%intconst0]}[*] -> []
[]:NewObj{<GetMember: void testMethod()>[10@L23] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void foo()>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<U: void foo(int)>,type=java.lang.reflect.Method}]
[]:NewObj{<GetMember: void testMethod()>[14@L24] newarray java.lang.Class[%intconst0]}[*] -> [[]:ConstantObj{java.lang.Class: U.class}]
[]:NewObj{<GetMember: void testMethod()>[18@L25] newarray java.lang.Object[%intconst0]}[*] -> [[]:ReflectionMetaObj{alloc=<U: void foo(U)>,type=java.lang.reflect.Method}, []:ReflectionMetaObj{alloc=<V: void foo(V)>,type=java.lang.reflect.Method}]
[]:NewObj{<GetMember: void testMethod()>[4@L22] newarray java.lang.Class[%intconst0]}[*] -> []

